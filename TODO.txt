* Subclass all ambient, diffuse and so on Phong params into a
  "fx_common_color_or_texture_type" as per the Collada spec.
  Allow for both a color and texture option (back linking textcoords a
  hassle?).

* The Materials/Effect/Texture system need a overhaul. Use a generic
  shader and allow for things like using textures on non-diffuse
  properties. Also perpixel lighting. This ties into the above note.

*  Try implement the COLLADA FX specs. Would fix above.

* Rewrite the Collada loader, to load everything in order?
  (But in pratice Images come after effects for some reason?).
  Might be fine the way it is? Call on need does seem to work fine.

* Store all id's / sid's in the Collada type to allow for path setting.
  (Requires the loader to pass the origional Collada object around.)

* Consider making the XML engine pluggable like rendering engine?

* Maybe replace QT editor windows with an inbuilt HTTP server and webkit
  rendered windows?

* Collada version differences.
  In Collada 1.4.1 a <texture> will link to a <sampler2D> which will
  link to a <surface type="2D"> which will then <init_from> an <image>.
  In Collada 1.5 <texture> links directly to a <sampler2D> that
  <instance_image>'s an <image>.

* QT Widgets draw in reversed order, window on top is window behind o_O

* Seperate Source/Input's with Texture S/T coords from XYZ ones (and RGBA).

* Update getColladaObjectById in ColladaDoc to store a list of
  ids->ColladaObjects to save on reloading, prevent duplicates.

* Some things (textures mostly) are looked up in an unsorted_map in the
  main rendering loop and they probably don't need to be in reality. I
  am just being pedantic about things being render agnostic as possible.
  Now days is an unsorted_map lookup to costly to put in a main render
  loop? Maybe I'm over optimizing...

* Vertices class seems to be a pointless clone of Input...

* InstanceGeomerty and Collada->MaterialLibrary should probably
  implement the same interface. Maybe a template...
